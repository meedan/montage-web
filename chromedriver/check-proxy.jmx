<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
        <stringProp name="variableName">random_value</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="maximumValue">9999999</stringProp>
        <stringProp name="randomSeed"></stringProp>
        <boolProp name="perThread">false</boolProp>
      </RandomVariableConfig>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${__P(host,google.com)}</stringProp>
        <stringProp name="HTTPSampler.port">${__P(port,80)}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${__P(protocol,http)}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${__P(path,/)}</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">http://check-api.test.checkmedia.org</stringProp>
            <stringProp name="Authorization.username">${__P(AUTH_USER)}</stringProp>
            <stringProp name="Authorization.password">${__P(AUTH_PASS)}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">http://test.checkmedia.org/</stringProp>
            <stringProp name="Authorization.username">${__P(AUTH_USER)}</stringProp>
            <stringProp name="Authorization.password">${__P(AUTH_PASS)}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://test.checkmedia.org</stringProp>
            <stringProp name="Authorization.username">${__P(AUTH_USER)}</stringProp>
            <stringProp name="Authorization.password">${__P(AUTH_PASS)}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://check-api.test.checkmedia.org</stringProp>
            <stringProp name="Authorization.username">${__P(AUTH_USER)}</stringProp>
            <stringProp name="Authorization.password">${__P(AUTH_PASS)}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
      </AuthManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">${__P(threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="report" elementType="Argument">
            <stringProp name="Argument.name">report</stringProp>
            <stringProp name="Argument.value">${__P(report,jmeter-test-report.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="start" elementType="Argument">
            <stringProp name="Argument.name">start</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="PrÃ©-Processador BeanShell" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">f = new FileOutputStream(vars.get(&quot;report&quot;).toString(), true); 
p = new PrintStream(f); 

if (ctx.getThreadNum() == 1 &amp;&amp; (vars.get(&quot;start&quot;).length() &lt;1) &amp;&amp; (vars.getIteration() == 1)){
	p.print (&quot;timeStamp;elapsed;ID;label;responseCode;responseMessage;threadName;success;bytes;latency;IdleTime;URL;HTTP VERB;Parameters;Source Test;&gt;400&quot;);		
	vars.put(&quot;start&quot;,&quot;true&quot;);
}	
p.close();f.close();
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,2)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0.8</stringProp>
        <longProp name="ThreadGroup.start_time">1345498621000</longProp>
        <longProp name="ThreadGroup.end_time">1345498621000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,30)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="variableName">random_value</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9999999</stringProp>
          <stringProp name="randomSeed"></stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="team_ids" elementType="Argument">
              <stringProp name="Argument.name">team_ids</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="team_slugs" elementType="Argument">
              <stringProp name="Argument.name">team_slugs</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="project_ids" elementType="Argument">
              <stringProp name="Argument.name">project_ids</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="project_titles" elementType="Argument">
              <stringProp name="Argument.name">project_titles</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="user_ids" elementType="Argument">
              <stringProp name="Argument.name">user_ids</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="id" elementType="Argument">
              <stringProp name="Argument.name">id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="team_user_ids" elementType="Argument">
              <stringProp name="Argument.name">team_user_ids</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="team_user_id" elementType="Argument">
              <stringProp name="Argument.name">team_user_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="project_id" elementType="Argument">
              <stringProp name="Argument.name">project_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="project_dbid" elementType="Argument">
              <stringProp name="Argument.name">project_dbid</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="team_id" elementType="Argument">
              <stringProp name="Argument.name">team_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="team_dbid" elementType="Argument">
              <stringProp name="Argument.name">team_dbid</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="media_id" elementType="Argument">
              <stringProp name="Argument.name">media_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="media_dbid" elementType="Argument">
              <stringProp name="Argument.name">media_dbid</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="user_id" elementType="Argument">
              <stringProp name="Argument.name">user_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="user_dbid" elementType="Argument">
              <stringProp name="Argument.name">user_dbid</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="annotated_dbid" elementType="Argument">
              <stringProp name="Argument.name">annotated_dbid</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="x-check-token" elementType="Argument">
              <stringProp name="Argument.name">x-check-token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="status_id" elementType="Argument">
              <stringProp name="Argument.name">status_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="team_slug" elementType="Argument">
              <stringProp name="Argument.name">team_slug</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="count" elementType="Argument">
              <stringProp name="Argument.name">count</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="test_id" elementType="Argument">
              <stringProp name="Argument.name">test_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;
import org.apache.commons.lang.StringUtils;
import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Header; 


boolean isJSONValid(String test) {
    try {
	JSONParser parser = new JSONParser();
	JSONObject obj = (JSONObject) parser.parse(test);
    } catch (ex) {
            return false;
    }
    return true;
}

arguments = ctx.getCurrentSampler().getArguments();

try {
	if (ctx.getCurrentSampler().getName().contains(&quot;/api/users/sign_in&quot;)){	
			CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
			manager.clear();
	}

	if (((ctx.getCurrentSampler().getName().contains(&quot;team&quot;)) &amp;&amp; (ctx.getCurrentSampler().getName().contains(&quot;/members&quot;)) ) || ((ctx.getCurrentSampler().getName().contains(&quot;team&quot;)) &amp;&amp; (ctx.getCurrentSampler().getName().contains(&quot;/join&quot;)) )){
	     String old = vars.get(&quot;team_slug&quot;).toString();
	     old = old.replace(&quot;team&quot;,&quot;&quot;);
	     if (ctx.getCurrentSampler().getName().contains(&quot;/join&quot;)) {
		     old = &quot;/team&quot;+ctx.getThreadNum().toString()+vars.get(&quot;random_value&quot;).toString()+&quot;-&quot;+old+&quot;/join&quot;;
	     }else{
		     old = &quot;/team&quot;+ctx.getThreadNum().toString()+vars.get(&quot;random_value&quot;).toString()+&quot;-&quot;+old+&quot;/members&quot;;
	     }
		sampler.setPath(old);
	}

} catch (Exception ex) {
    log.info(&quot;Error in beanshell&quot;);
}

sampler.getHeaderManager().removeHeaderNamed(&quot;x-check-token&quot;); 
sampler.getHeaderManager().add(new Header(&quot;x-check-token&quot;,vars.get(&quot;x-check-token&quot;))); 

for (int n=0; n&lt;arguments.getArgumentCount(); n++) {
     argument = arguments.getArgument(n);
	String a = argument.toString();
     if (argument.getName().contains(&quot;email&quot;)) {
   	
          String newVal = ctx.getThreadNum().toString() + vars.get(&quot;random_value&quot;).toString() + argument.getValue();
          argument.setValue(newVal);
      }else if (argument.getName().contains(&quot;team&quot;)) {
 		String newVal = argument.getValue();
	     newVal = newVal.replace(&quot;team&quot;,&quot;&quot;);
		newVal = &quot;team&quot;+ctx.getThreadNum().toString()+vars.get(&quot;random_value&quot;).toString()+&quot;-&quot;+newVal;	
          argument.setValue(newVal);
      }else if (argument.getName().contains(&quot;variables&quot;)){
      	
      	if (argument.getValue().contains(&quot;\&quot;url\&quot;&quot;)) {
		     a = a.replace(&quot;variables=&quot;,&quot;&quot;);
		 	JSONParser json_parser = new JSONParser();
			JSONObject json_obj = (JSONObject) json_parser.parse(a);
		     JSONObject i = (JSONObject)  json_obj.get(&quot;input_0&quot;);
			i.put(&quot;project_id&quot;,Integer.parseInt(vars.get(&quot;project_dbid&quot;)));
			json_obj.put(&quot;input_0&quot;,i);
		     argument.setValue(json_obj.toString());
      	}

      	
      	if (argument.getValue().contains(&quot;\&quot;annotated_id\&quot;&quot;)) {
		     a = a.replace(&quot;variables=&quot;,&quot;&quot;);
		 	JSONParser json_parser = new JSONParser();
			JSONObject json_obj = (JSONObject) json_parser.parse(a);
		     JSONObject i = (JSONObject)  json_obj.get(&quot;input_0&quot;);
			i.put(&quot;annotated_id&quot;,vars.get(&quot;media_dbid&quot;).toString());
			json_obj.put(&quot;input_0&quot;,i);
		     argument.setValue(json_obj.toString());
      	}
	     
	}else {
      	if (a.length() &gt; 1){
		a = a.substring(1, a.length());
		}else{
			a = &quot;&quot;;
		}

      	if (isJSONValid(a))  {
      
	 	JSONParser json_parser = new JSONParser();
		JSONObject json_obj = (JSONObject) json_parser.parse(a);

	      if (argument.getValue().contains(&quot;\&quot;slug_0\&quot;:\&quot;team&quot;)){
		     JSONObject i = (JSONObject)  json_obj.get(&quot;variables&quot;);
		     String old = i.get(&quot;slug_0&quot;).toString();
		     old = old.replace(&quot;team&quot;,&quot;&quot;);
			i.put(&quot;slug_0&quot;,&quot;team&quot;+ctx.getThreadNum().toString()+vars.get(&quot;random_value&quot;).toString()+&quot;-&quot;+old);	
			json_obj.put(&quot;variables&quot;,i);
		     argument.setValue(json_obj.toString());		            
	      }

	      if (argument.getValue().contains(&quot;\&quot;team\&quot;:\&quot;team&quot;)){
		     String old = json_obj.get(&quot;team&quot;).toString();
		     old = old.replace(&quot;team&quot;,&quot;&quot;);
			json_obj.put(&quot;team&quot;,&quot;team&quot;+ctx.getThreadNum().toString()+vars.get(&quot;random_value&quot;).toString()+&quot;-&quot;+old);	
		     argument.setValue(json_obj.toString());		            
	      }
	      
	      if (argument.getValue().contains(&quot;\&quot;title\&quot;:\&quot;Project&quot;)){
		     JSONObject v = (JSONObject)  json_obj.get(&quot;variables&quot;);
		     JSONObject i = (JSONObject)  v.get(&quot;input_0&quot;);
		     String old = i.get(&quot;title&quot;).toString();
		     old = old.replace(&quot;Project&quot;,&quot;&quot;);
			i.put(&quot;title&quot;,&quot;Project&quot;+ctx.getThreadNum().toString()+vars.get(&quot;random_value&quot;).toString()+&quot;-&quot;+old);	
			v.put(&quot;input_0&quot;,i);
			json_obj.put(&quot;variables&quot;,v);
		     argument.setValue(json_obj.toString());
		 }

		 
	      if ((argument.getValue().contains(&quot;\&quot;variables\&quot;:{\&quot;id_0\&quot;&quot;)) &amp;&amp; (!argument.getValue().contains(&quot;Search_SearchRelayQL&quot;)) ){
			String a = argument.toString();
			if (a.substring(0, 1).equals(&quot;=&quot;)){
				a = a.substring(1, a.length());
			}
			JSONParser parser = new JSONParser();
			JSONObject obj = (JSONObject) parser.parse(a);
		     JSONObject v = (JSONObject)  obj.get(&quot;variables&quot;);
		          
	      	if (argument.getValue().contains(&quot;Project_ProjectRelayQL&quot;)){  
				v.put(&quot;id_0&quot;, vars.get(&quot;project_id&quot;));
				obj.put(&quot;variables&quot;, v);
		          argument.setValue(obj.toString());    
	      	} else {
				v.put(&quot;id_0&quot;, vars.get(&quot;project_dbid&quot;));
				obj.put(&quot;variables&quot;, v);
		          argument.setValue(obj.toString());    
	      	}
	      }

	      if (argument.getValue().contains(&quot;\&quot;variables\&quot;:{\&quot;ids_0\&quot;&quot;)){
			String a = argument.toString();
			if (a.substring(0, 1).equals(&quot;=&quot;)){
				a = a.substring(1, a.length());
			}
			JSONParser parser = new JSONParser();
			JSONObject obj = (JSONObject) parser.parse(a);
		     JSONObject v = (JSONObject)  obj.get(&quot;variables&quot;);     		     
			v.put(&quot;ids_0&quot;, vars.get(&quot;media_dbid&quot;).toString()+&quot;,&quot;+vars.get(&quot;project_dbid&quot;).toString());
			obj.put(&quot;variables&quot;, v);
	          argument.setValue(obj.toString());    
	      }

	  	 if (argument.getValue().contains(&quot;mutation CreateProject&quot;)){
			JSONParser parser = new JSONParser();
			String a = argument.toString();
			
		     String v_original = a;
			v_original = a = &quot;{&quot;+a.substring(a.indexOf(&quot;\&quot;variables\&quot;:{&quot;),a.length())+&quot;}&quot;;
		     Object obj = parser.parse(a);
		     JSONObject v = (JSONObject)  obj.get(&quot;variables&quot;);
		     JSONObject input = (JSONObject)  v.get(&quot;input_0&quot;);
			String[] li = vars.get(&quot;team_ids&quot;).split(&quot;,&quot;);
			String[] lu = vars.get(&quot;team_slugs&quot;).split(&quot;,&quot;);
			String team =   obj.get(&quot;team&quot;);
			int id = 0;
			for (int x = 0; x &lt; lu.length; x++) {
			  if (lu[x].equals(team)){
			      id = Integer.parseInt(li[x]);
			  }
			}
			input.put(&quot;team_id&quot;,id);	
			v.put(&quot;input_0&quot;, input);
			obj.put(&quot;variables&quot;, v);
			a = argument.toString();	
			v_original = v_original.substring(1, v_original.length()-1);
			String n = obj.toString();
			n = n.substring(1, n.length());
			a = a.replace(v_original, n);
			a = a.substring(1, a.length());
	          argument.setValue(a);       
        }

	   if (argument.getValue().contains(&quot;\&quot;variables\&quot;:{\&quot;input_0\&quot;:&quot;)){   	
		JSONParser parser = new JSONParser();
	   	a = argument.getValue().toString();
		if (a.charAt(0) == &quot;=&quot;){
			a = a.substring(1, a.length());
		}
		JSONObject obj = (JSONObject) parser.parse(a);
	     JSONObject v = (JSONObject) obj.get(&quot;variables&quot;);
	     JSONObject i = (JSONObject)  v.get(&quot;input_0&quot;);

	     if (argument.getValue().contains(&quot;\&quot;name\&quot;:\&quot;team&quot;)){
		     String old = i.get(&quot;name&quot;).toString();
		     old = old.replace(&quot;team&quot;,&quot;&quot;);
			i.put(&quot;name&quot;,&quot;team&quot;+ctx.getThreadNum().toString()+vars.get(&quot;random_value&quot;).toString()+&quot;-&quot;+old);	
	 	}
      
		if (argument.getValue().contains(&quot;\&quot;slug\&quot;:&quot;)){
		     String old = i.get(&quot;slug&quot;).toString();
		     old = old.replace(&quot;team&quot;,&quot;&quot;);
			i.put(&quot;slug&quot;,&quot;team&quot;+ctx.getThreadNum().toString()+vars.get(&quot;random_value&quot;).toString()+&quot;-&quot;+old);	
		}

		if (argument.getValue().contains(&quot;\&quot;team_id\&quot;:&quot;)){
		     String v_original = v.toString();
			String[] li = vars.get(&quot;team_ids&quot;).split(&quot;,&quot;);
			String[] lu = vars.get(&quot;team_slugs&quot;).split(&quot;,&quot;);
			String team =   obj.get(&quot;team&quot;);
		     int id = Integer.parseInt(li[0]);
			for (int x = 0; x &lt; lu.length; x++) {
			  if (lu[x].equals(team)){
			      id = Integer.parseInt(li[x]);
			  }
			}
			i.put(&quot;team_id&quot;,id);	
		}		

		if (argument.getValue().contains(&quot;\&quot;user_id\&quot;:&quot;)){
			i.put(&quot;user_id&quot;, Integer.parseInt(vars.get(&quot;user_dbid&quot;)));			
		}			

		if (argument.getValue().contains(&quot;\&quot;current_team_id\&quot;:&quot;)){
			i.put (&quot;current_team_id&quot;, Integer.parseInt(vars.get(&quot;team_dbid&quot;)));			
		}			

		if (argument.getValue().contains(&quot;\&quot;annotated_id\&quot;:&quot;)){
			i.put (&quot;annotated_id&quot;, vars.get(&quot;media_dbid&quot;).toString());
			//i.put (&quot;annotated_id&quot;, vars.get(&quot;annotated_id&quot;).toString());			
		}			

		if (argument.getValue().contains(&quot;\&quot;id\&quot;:&quot;)){
			if  (argument.getValue().contains(&quot;UpdateTeamUser&quot;)) {
				i.put(&quot;id&quot;, vars.get(&quot;team_user_id&quot;));			
			}else if (argument.getValue().contains(&quot;UpdateUser&quot;)) {			
				i.put(&quot;id&quot;, vars.get(&quot;id&quot;));			
			}else if (argument.getValue().contains(&quot;mutation UpdateStatus&quot;)) {			
				i.put(&quot;id&quot;, vars.get(&quot;status_id&quot;));			
			}else if (argument.getValue().contains(&quot;DestroyAnnotation&quot;)){			
				i.put(&quot;id&quot;, vars.get(&quot;annotation_id&quot;));			
			}else{
				i.put(&quot;id&quot;, vars.get(&quot;team_id&quot;));			
			}
		}			
		v.put(&quot;input_0&quot;,i);
		obj.put(&quot;variables&quot;,v);
	     argument.setValue(obj.toString());   
	   }
	   	
   	  }
      }
}


sampler.setArguments(arguments);  
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;
import org.apache.commons.lang.StringUtils;

response = prev.getResponseDataAsString();
try {
if (response.contains(&quot;\&quot;type\&quot;:\&quot;user\&quot;,\&quot;data\&quot;:{\&quot;id\&quot;:&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    vars.put(&quot;user_dbid&quot;, Integer.toString((int)d.get(&quot;dbid&quot;)));
    vars.put(&quot;x-check-token&quot;, d.get(&quot;token&quot;).toString());
}

if (response.contains(&quot;\&quot;data\&quot;:{\&quot;createTeam\&quot;&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject m = (JSONObject)  d.get(&quot;createTeam&quot;);
    JSONObject t = (JSONObject)  m.get(&quot;team&quot;);
    String slug = (String)t.get(&quot;slug&quot;);
    int id = (int)t.get(&quot;dbid&quot;);
	String s =  vars.get(&quot;team_ids&quot;);
	String u =  vars.get(&quot;team_slugs&quot;);
	if (s.length() &gt; 0 ){
		s = s + &quot;,&quot; + Integer.toString(id);
		vars.put(&quot;team_ids&quot;, s);
		u = u + &quot;,&quot; + slug;
		vars.put(&quot;team_slugs&quot;, u);
	} else {
		vars.put(&quot;team_ids&quot;, Integer.toString(id));
		vars.put(&quot;team_slugs&quot;, slug);		
	}
     vars.put(&quot;team_id&quot;, (String)t.get(&quot;id&quot;));
     vars.put(&quot;team_dbid&quot;, Integer.toString(id));
     vars.put(&quot;team_slug&quot;, slug);
}

if (response.contains(&quot;\&quot;project_mediaEdge\&quot;&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject c = (JSONObject)  d.get(&quot;createProjectMedia&quot;);
    JSONObject m = (JSONObject)  c.get(&quot;project_mediaEdge&quot;);
    JSONObject n = (JSONObject)  m.get(&quot;node&quot;);
    vars.put(&quot;annotated_dbid&quot;, (String)n.get(&quot;dbid&quot;));
}

if (response.contains(&quot;{\&quot;data\&quot;:{\&quot;project_media\&quot;:{\&quot;id\&quot;&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject c = (JSONObject)  d.get(&quot;project_media&quot;);
	
    if (c.toString().contains(&quot;dbid&quot;)) {
	    vars.put(&quot;media_id&quot;, (String)c.get(&quot;id&quot;));
	    vars.put(&quot;media_dbid&quot;, Integer.toString((int)c.get(&quot;dbid&quot;)));
    }

	if (response.contains(&quot;\&quot;last_status_obj\&quot;&quot;)){
	     JSONObject t = (JSONObject)  c.get(&quot;last_status_obj&quot;);
	     vars.put(&quot;status_id&quot;, (String)t.get(&quot;id&quot;));
	}


}

if (response.contains(&quot;\&quot;project_media\&quot;:{\&quot;dbid\&quot;&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject c = (JSONObject)  d.get(&quot;createProjectMedia&quot;);
    JSONObject m = (JSONObject)  c.get(&quot;project_media&quot;);
    if (m.toString().contains(&quot;dbid&quot;)) {
	    vars.put(&quot;media_id&quot;, (String)m.get(&quot;id&quot;));
	    vars.put(&quot;media_dbid&quot;, Integer.toString((int)m.get(&quot;dbid&quot;)));
    }

}

if (response.contains(&quot;{\&quot;data\&quot;:{\&quot;createTeamUser\&quot;&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject c = (JSONObject)  d.get(&quot;createTeamUser&quot;);
    JSONObject t = (JSONObject)  c.get(&quot;team_user&quot;);
    vars.put(&quot;team_user_id&quot;, (String)t.get(&quot;id&quot;));
}


if  (response.contains(&quot;{\&quot;data\&quot;:{\&quot;team\&quot;:{\&quot;id\&quot;:\&quot;&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject p = (JSONObject)  d.get(&quot;team&quot;);
    if (p.toString().contains(&quot;bdib&quot;)) {
	    vars.put(&quot;team_id&quot;, (String)p.get(&quot;id&quot;));
	    vars.put(&quot;team_dbid&quot;, Integer.toString((int)p.get(&quot;dbid&quot;)));
    }
} 

if (response.contains(&quot;\&quot;current_team\&quot;:{\&quot;&quot;)) {
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject t = (JSONObject)  obj.get(&quot;data&quot;);
	if (t.toString().contains(&quot;\&quot;me\&quot;&quot;)) {
	    JSONObject m = (JSONObject)  t.get(&quot;me&quot;);
		if (m.toString().contains(&quot;\&quot;current_team\&quot;&quot;)) {
		    JSONObject d = (JSONObject)  m.get(&quot;current_team&quot;);
		    if (d.toString().contains(&quot;dbib&quot;)) {
			    vars.put(&quot;team_id&quot;, (String)d.get(&quot;id&quot;));
			    vars.put(&quot;team_dbid&quot;, Integer.toString((int)d.get(&quot;dbid&quot;)));
	    		}
		}
		
	} else{
		if (t.toString().contains(&quot;\&quot;current_team\&quot;&quot;)) {
		    JSONObject d = (JSONObject)  t.get(&quot;current_team&quot;);
			log.info (&quot;aa&quot;);
		    log.info (d.toString());
		    if (d.toString().contains(&quot;dbib&quot;)) {
			    vars.put(&quot;team_id&quot;, (String)d.get(&quot;id&quot;));
			    vars.put(&quot;team_dbid&quot;, Integer.toString((int)d.get(&quot;dbid&quot;)));
	    		}
		}
	}
	
} 

if (response.contains(&quot;\&quot;data\&quot;:{\&quot;project\&quot;:{\&quot;id\&quot;:\&quot;&quot;)){
   String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject p = (JSONObject)  d.get(&quot;project&quot;);
    if (p.toString().contains(&quot;bdib&quot;)) {
	    vars.put(&quot;project_id&quot;, (String)p.get(&quot;id&quot;));
	    vars.put(&quot;project_dbid&quot;, Integer.toString((int)p.get(&quot;dbid&quot;)));
    }
}

//USER
if (response.contains(&quot;{\&quot;data\&quot;:{\&quot;me\&quot;:&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject m = (JSONObject)  d.get(&quot;me&quot;);
    String id = (String)m.get(&quot;id&quot;);
    String s =  vars.get(&quot;user_ids&quot;);
    if (s.length() &gt; 0 ){
          if(!s.contains(id)){
            s = s + &quot;,&quot; + id;
          }		
		vars.put(&quot;user_ids&quot;, s);
	} else {
		vars.put(&quot;user_ids&quot;, id);
	}
	vars.put(&quot;id&quot;, id);
}

if (response.contains(&quot;\&quot;createComment\&quot;&quot;)){
   String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject m = (JSONObject)  d.get(&quot;createComment&quot;);
    JSONObject p = (JSONObject)  m.get(&quot;project_media&quot;);
    JSONObject l = (JSONObject)  p.get(&quot;_log46RSmR&quot;);
    JsonArray e = l.get(&quot;edges&quot;).asArray();
    JSONObject n = (JSONObject) e.get(0);
    JSONObject nn = (JSONObject) n.get(&quot;node&quot;);
    JSONObject a = (JSONObject) nn.get(&quot;annotation&quot;);    
    vars.put(&quot;annotation_id&quot;, a.get(&quot;id&quot;));
}

if (response.contains(&quot;\&quot;createProject\&quot;&quot;)){
    String jsonString  = response;
    JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
    JSONObject obj = (JSONObject) parser.parse(data);
    JSONObject d = (JSONObject)  obj.get(&quot;data&quot;);
    JSONObject m = (JSONObject)  d.get(&quot;createProject&quot;);
    JSONObject p = (JSONObject)  m.get(&quot;projectEdge&quot;);
    JSONObject n = (JSONObject)  p.get(&quot;node&quot;);
    vars.put(&quot;project_dbid&quot;, Integer.toString((int)n.get(&quot;dbid&quot;)));
    String slug = (String)n.get(&quot;title&quot;);
    String id = Integer.toString((int)n.get(&quot;dbid&quot;));
	String s =  vars.get(&quot;project_ids&quot;);
	String u =  vars.get(&quot;project_titles&quot;);

	if (s.length() &gt; 0 ){
		s = s + &quot;,&quot; + id;
		vars.put(&quot;project_ids&quot;, s);
		u = u + &quot;,&quot; + slug;
		vars.put(&quot;project_titles&quot;, u);

	} else {
		vars.put(&quot;project_ids&quot;, id);
		vars.put(&quot;project_titles&quot;, slug);		
	}
}

} catch (Exception ex) {
    log.info(&quot;XXXXXXXXXXXXXXXXXXXXXXX\n\n&quot;);
    log.info(&quot;Error in POS beanshell&quot;);
    log.info(ex);
    log.info(&quot;\n\nXXXXXXXXXXXXXXXXXXXXXXX&quot;);
}

/////////////////FOR REPORT GENERATION
f = new FileOutputStream(vars.get(&quot;report&quot;).toString(), true); 
p = new PrintStream(f); 
String output;
String timestamp = System.currentTimeMillis().toString();
String elapsed = prev.getTime().toString();
String name = ctx.getCurrentSampler().getName().toString();
String url = ctx.getCurrentSampler().getUrl().toString();
String verb = ctx.getCurrentSampler().getMethod().toString();
String path = ctx.getCurrentSampler().getUrl().toString();
String nr = name.substring(0, name.indexOf(&apos; &apos;));
String label = name.substring(name.indexOf(&apos; &apos;)+1,name.length());
String responseCode = prev.getResponseCode();
String responseMessage = prev.getResponseMessage();
String thread = ctx.getThreadNum().toString();
String success = prev.isSuccessful().toString();
String nrobytes =  prev.getBytes().toString();
String latency =  prev.getLatency().toString();
String idle = prev.getIdleTime().toString();
String g400 = &quot;&quot;;
String arguments = ctx.getCurrentSampler().getArguments().toString();
String testid = &quot;&quot;;

if (arguments.indexOf(&quot;test_id=&quot;) &gt;= 0 ){
	testid = arguments.substring(arguments.indexOf(&quot;test_id=&quot;)+8,arguments.indexOf(&quot;()&quot;)+2);
	vars.put(&quot;test_ids&quot;,testid);
}
arguments = arguments.replace(&quot;={&quot;,&quot;{&quot;);
if (prev.getTime() &gt;= 400) {
	g400 = &quot;true&quot;;
} else {
	g400 = &quot;false&quot;; 
}
output = &quot;\n&quot;+timestamp+&quot;;&quot;+elapsed+&quot;;&quot;+nr + &quot;;&quot; + label +&quot;;&quot;+responseCode + &quot;;&quot; + responseMessage + &quot;;&quot; + thread + &quot;;&quot; + success + &quot;;&quot; + nrobytes + &quot;;&quot; + latency + &quot;;&quot; + idle + &quot;;&quot; + url + &quot;;&quot; + verb+ &quot;;&quot; + arguments+ &quot;;&quot; + vars.get(&quot;test_ids&quot;)+ &quot;;&quot; + g400 ;
p.print (output);
p.close();f.close();
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">8080</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="1258588554">.*(font).*</stringProp>
          <stringProp name="-494548985">.*(google-analytics).*</stringProp>
          <stringProp name="-756587223">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff|woff2|svg|bdic|css)</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list">
          <stringProp name="-415391779">.*(checkmedia).*</stringProp>
          <stringProp name="1539484975">.*(localdev).*</stringProp>
          <stringProp name="20192030">.*(localhost).*</stringProp>
          <stringProp name="1537354899">.*(api.test).*</stringProp>
        </collectionProp>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
