stages:
  - test
  - build
  - deploy

#test:
#  image: docker:git
#  services:
#    - docker:dind
#  tags:
#    - meedan
#    - meedan-labs
#  stage: test
#  script:
#    - apk add --no-cache curl wget git py-pip bash openssh
#    - sysctl -w vm.max_map_count=262144
#    - pip install docker-compose==1.23.2
#    - mkdir -p ~/.ssh
#    - echo "$id_rsa" | tr -d '\r' > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#    - eval "$(ssh-agent -s)"
#    - ssh-add ~/.ssh/id_rsa
#    #- ssh-keyscan -H 'github.com' >> ~/.ssh/known_hosts
#    - ls ~/.ssh
#    - git clone --recursive git@github.com:meedan/check.git && cd check
#    - git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/meedan/configurator ./configurator
#    #- git clone https://github.com/meedan/check-api.git
#    #- git clone https://github.com/meedan/check-web.git
#    #- git clone https://github.com/meedan/pender.git
#    #- git clone https://gitlab.com/meedan/alegre.git
#    #- git clone https://github.com/meedan/vframe.git
#    #- git clone -b feat/7600-aws-deploy https://github.com/meedan/montage-web.git
#    - d=configurator/check/travis/montage-web/; for f in $(find $d -type f); do cp "$f" "montage-web/${f/$d/}"; done
#    - ls montage-web/test
#    - d=configurator/check/local/pender/; for f in $(find $d -type f); do cp "$f" "pender/${f/$d/}"; done
#    - d=configurator/check/local/check-api/; for f in $(find $d -type f); do cp "$f" "check-api/${f/$d/}"; done
#    - d=configurator/check/local/alegre/; for f in $(find $d -type f); do cp "$f" "alegre/${f/$d/}"; done
#    - d=configurator/check/local/check-web/; for f in $(find $d -type f); do cp "$f" "check-web/${f/$d/}"; done
#    - d=configurator/check/local/vframe/; for f in $(find $d -type f); do cp "$f" "vframe/${f/$d/}"; done
#    #- cp configurator/check/test/montage-web/elasticsearch.yml ./
#    #- cp configurator/check/test/montage-web/postgresql.conf ./
#    - COMPOSE_HTTP_TIMEOUT=400 docker-compose -f docker-compose.yml  -f docker-test.yml up -d
#    #- docker-compose -f docker-compose.yml  -f docker-test.yml exec -T montage.test bundle install --gemfile test/Gemfile
#    #- docker-compose -f docker-compose.yml  -f docker-test.yml exec -T montage.test npm run test
#    #- d=configurator/check/test/montage-web/pender/; for f in $(find $d -type f); do cp "$f" "pender/${f/$d/}"; done
#    #- d=configurator/check/test/montage-web/pender/; for f in $(find $d -type f); do cp "$f" "pender/${f/$d/}"; done
#  only:
#    - feat/7600-aws-deploy



build_qa:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - meedan
    - meedan-labs
  stage: build
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    GH_TOKEN: $GH_TOKEN 
    APP: montage-web
    DEPLOY_ENV: development


  script:
    - export RAILS_ENV="development"
    - apk add --no-cache curl jq python py-pip git
    - pip install docutils==0.14
    - pip install awscli==1.16.201
    - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/meedan/configurator ./configurator
    - d=configurator/check/qa/montage-web/; for f in $(find $d -type f); do cp "$f" "${f/$d/}"; done
    - docker build  -f docker/Dockerfile.production -t "$ECR_BASE_URL/qa/montage/web:$CI_COMMIT_SHA"  .
    - docker push "$ECR_BASE_URL/qa/montage/web:$CI_COMMIT_SHA"
  only:
    - develop


deploy_qa:
  image: python:3-alpine
  stage: deploy
  tags:
    - meedan
    - meedan-labs
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
    GH_TOKEN: $GH_TOKEN 
    APP: montage-web
    DEPLOY_ENV: development

  script:
    - export RAILS_ENV="development"
    - apk add --no-cache curl jq python py-pip git
    - pip install ecs-deploy==1.7.0
    - ecs deploy ecs-qa  qa-montage-web --image qa-montage-web-c $ECR_BASE_URL/qa/montage/web:$CI_COMMIT_SHA --timeout 3600
    - echo "new Image was deployed $ECR_BASE_URL/qa/montage/web:$CI_COMMIT_SHA"
  only:
    - develop

build_live:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - meedan
    - meedan-labs
  stage: build
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    GH_TOKEN: $GH_TOKEN 
    APP: montage-web
    DEPLOY_ENV: production
  script:
    - export RAILS_ENV="production"
    - apk add --no-cache curl jq python py-pip git
    - pip install docutils==0.14
    - pip install awscli==1.16.201
    - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/meedan/configurator ./configurator
    - d=configurator/check/live/montage-web/; for f in $(find $d -type f); do cp "$f" "${f/$d/}"; done
    - docker build  -f docker/Dockerfile.production -t "$ECR_BASE_URL/live/montage/web:$CI_COMMIT_SHA"  .
    - docker push "$ECR_BASE_URL/live/montage/web:$CI_COMMIT_SHA"
  only:
    - master


deploy_live:
  image: python:3-alpine
  stage: deploy
  tags:
    - meedan
    - meedan-labs
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
    GH_TOKEN: $GH_TOKEN 
    APP: montage-web
    DEPLOY_ENV: production
  script:
    - export RAILS_ENV="production"
    - apk add --no-cache curl jq python py-pip git
    - pip install ecs-deploy==1.7.0
    - ecs deploy ecs-live  live-montage-web --image live-montage-web-c $ECR_BASE_URL/live/montage/web:$CI_COMMIT_SHA --timeout 3600
    - echo "new Image was deployed $ECR_BASE_URL/live/montage/web:$CI_COMMIT_SHA"
  only:
    - master